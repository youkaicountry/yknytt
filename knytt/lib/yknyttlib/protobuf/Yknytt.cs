// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yknytt.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tutorial {

  /// <summary>Holder for reflection information generated from yknytt.proto</summary>
  public static partial class YknyttReflection {

    #region Descriptor
    /// <summary>File descriptor for yknytt.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static YknyttReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgx5a255dHQucHJvdG8SCHR1dG9yaWFsInsKBUdyZWV0EhIKCnBvc2l0aW9u",
            "X3gYASABKAUSEgoKcG9zaXRpb25feRgCIAEoBRINCgVtYXBfeBgDIAEoBRIN",
            "CgVtYXBfeRgEIAEoBRIOCgZwb3dlcnMYBSADKAgSDQoFd29ybGQYBiABKAkS",
            "DQoFZmxhZ3MYByADKAhiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tutorial.Greet), global::Tutorial.Greet.Parser, new[]{ "PositionX", "PositionY", "MapX", "MapY", "Powers", "World", "Flags" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Greet : pb::IMessage<Greet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Greet> _parser = new pb::MessageParser<Greet>(() => new Greet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Greet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tutorial.YknyttReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Greet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Greet(Greet other) : this() {
      positionX_ = other.positionX_;
      positionY_ = other.positionY_;
      mapX_ = other.mapX_;
      mapY_ = other.mapY_;
      powers_ = other.powers_.Clone();
      world_ = other.world_;
      flags_ = other.flags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Greet Clone() {
      return new Greet(this);
    }

    /// <summary>Field number for the "position_x" field.</summary>
    public const int PositionXFieldNumber = 1;
    private int positionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    /// <summary>Field number for the "position_y" field.</summary>
    public const int PositionYFieldNumber = 2;
    private int positionY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PositionY {
      get { return positionY_; }
      set {
        positionY_ = value;
      }
    }

    /// <summary>Field number for the "map_x" field.</summary>
    public const int MapXFieldNumber = 3;
    private int mapX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapX {
      get { return mapX_; }
      set {
        mapX_ = value;
      }
    }

    /// <summary>Field number for the "map_y" field.</summary>
    public const int MapYFieldNumber = 4;
    private int mapY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapY {
      get { return mapY_; }
      set {
        mapY_ = value;
      }
    }

    /// <summary>Field number for the "powers" field.</summary>
    public const int PowersFieldNumber = 5;
    private static readonly pb::FieldCodec<bool> _repeated_powers_codec
        = pb::FieldCodec.ForBool(42);
    private readonly pbc::RepeatedField<bool> powers_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> Powers {
      get { return powers_; }
    }

    /// <summary>Field number for the "world" field.</summary>
    public const int WorldFieldNumber = 6;
    private string world_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string World {
      get { return world_; }
      set {
        world_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 7;
    private static readonly pb::FieldCodec<bool> _repeated_flags_codec
        = pb::FieldCodec.ForBool(58);
    private readonly pbc::RepeatedField<bool> flags_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> Flags {
      get { return flags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Greet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Greet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PositionX != other.PositionX) return false;
      if (PositionY != other.PositionY) return false;
      if (MapX != other.MapX) return false;
      if (MapY != other.MapY) return false;
      if(!powers_.Equals(other.powers_)) return false;
      if (World != other.World) return false;
      if(!flags_.Equals(other.flags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PositionX != 0) hash ^= PositionX.GetHashCode();
      if (PositionY != 0) hash ^= PositionY.GetHashCode();
      if (MapX != 0) hash ^= MapX.GetHashCode();
      if (MapY != 0) hash ^= MapY.GetHashCode();
      hash ^= powers_.GetHashCode();
      if (World.Length != 0) hash ^= World.GetHashCode();
      hash ^= flags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PositionX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PositionX);
      }
      if (PositionY != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PositionY);
      }
      if (MapX != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MapX);
      }
      if (MapY != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MapY);
      }
      powers_.WriteTo(output, _repeated_powers_codec);
      if (World.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(World);
      }
      flags_.WriteTo(output, _repeated_flags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PositionX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PositionX);
      }
      if (PositionY != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PositionY);
      }
      if (MapX != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MapX);
      }
      if (MapY != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MapY);
      }
      powers_.WriteTo(ref output, _repeated_powers_codec);
      if (World.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(World);
      }
      flags_.WriteTo(ref output, _repeated_flags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PositionX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PositionX);
      }
      if (PositionY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PositionY);
      }
      if (MapX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapX);
      }
      if (MapY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapY);
      }
      size += powers_.CalculateSize(_repeated_powers_codec);
      if (World.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(World);
      }
      size += flags_.CalculateSize(_repeated_flags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Greet other) {
      if (other == null) {
        return;
      }
      if (other.PositionX != 0) {
        PositionX = other.PositionX;
      }
      if (other.PositionY != 0) {
        PositionY = other.PositionY;
      }
      if (other.MapX != 0) {
        MapX = other.MapX;
      }
      if (other.MapY != 0) {
        MapY = other.MapY;
      }
      powers_.Add(other.powers_);
      if (other.World.Length != 0) {
        World = other.World;
      }
      flags_.Add(other.flags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PositionX = input.ReadInt32();
            break;
          }
          case 16: {
            PositionY = input.ReadInt32();
            break;
          }
          case 24: {
            MapX = input.ReadInt32();
            break;
          }
          case 32: {
            MapY = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            powers_.AddEntriesFrom(input, _repeated_powers_codec);
            break;
          }
          case 50: {
            World = input.ReadString();
            break;
          }
          case 58:
          case 56: {
            flags_.AddEntriesFrom(input, _repeated_flags_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PositionX = input.ReadInt32();
            break;
          }
          case 16: {
            PositionY = input.ReadInt32();
            break;
          }
          case 24: {
            MapX = input.ReadInt32();
            break;
          }
          case 32: {
            MapY = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            powers_.AddEntriesFrom(ref input, _repeated_powers_codec);
            break;
          }
          case 50: {
            World = input.ReadString();
            break;
          }
          case 58:
          case 56: {
            flags_.AddEntriesFrom(ref input, _repeated_flags_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
